syntax = "proto3";

package broker;
option go_package = "sdk-go/broker/pb";

service Broker {
    rpc GetQueue(GetQueueRequest) returns (GetQueueResponse);
    rpc Enqueue(EnqueueRequest) returns (EnqueueResponse);
    rpc Poll(PollRequest) returns (PollResponse);
    rpc CompletePoll(CompletePollRequest) returns (CompletePollResponse);
}

message QueueData {
  int64 active_queue_count = 1;
  int64 idle_queue_count = 2;
}

message ActiveQueue {
  string id = 1;
  string queue_name = 2;
  string poll_expiry = 3; // Handle as string (ISO format), or use google.protobuf.Timestamp
  string payload = 4;
}

message IdleQueue {
  repeated string items = 1;
}

// GetQueue* gets all queue
message GetQueueRequest {}
message GetQueueResponse {
    string message = 1;
    QueueData data = 2;
}

// Enqueue* enqueue data to queue
message EnqueueRequest {
  string queue_name = 1;
  string payload = 2;
}
message EnqueueResponse {
  string message = 1;
}

// Poll* polls a single queue's entry
message PollRequest {
  string queue_name = 1;
}
message PollResponse {
  string message = 1;
  ActiveQueue data = 2;
}

// CompletePoll* ack polled queue entry
message CompletePollRequest {
  string queue_id = 1;
}
message CompletePollResponse {
  string message = 1;
}