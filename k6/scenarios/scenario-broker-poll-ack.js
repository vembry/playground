import { Client, StatusOK } from 'k6/net/grpc';
import { check, } from 'k6';


export const options = {
    vus: 1,
    duration: "1m",
};

const host = __ENV.BROKER_HOST
    ? __ENV.BROKER_HOST
    : "http://host.docker.internal:4000";


const client = new Client();
client.load([], 'broker.proto')

export default function () {
    client.connect(host, {
        plaintext: true
    })

    try {
        // queue name will be autogenerated as queue_{N}
        // N will be 0 until 9
        const number = Math.floor(Math.random() * 10);
        const queue = `queue_${number}`;

        // step 1. poll queue
        // ==================
        // construct param
        const dataPoll = {
            "queue_name": queue
        }

        // call rpc
        const responsePoll = client.invoke('broker.Broker/Poll', dataPoll)

        // assert response
        check(responsePoll, {
            'status is OK': (r) => r && r.status === StatusOK
        })

        if (!responsePoll.message.data) {
            // skipping queue
        } else {
            // step 2. complete poll
            // =====================

            // construct param
            const dataCompletePoll = {
                "queue_id": responsePoll.message.data.id
            }

            // call rpc
            const responseCompletePoll = client.invoke('broker.Broker/CompletePoll', dataCompletePoll)

            // assert response
            check(responseCompletePoll, {
                'status is OK': (r) => r && r.status === StatusOK
            })
        }
    } catch (e) {
        console.log("!catching error")
        console.log(e.message)
    }
    client.close()
}