# default configs
x-default: &default
  deploy:
    resources:
      limits:
        memory: 64m # defaulted memory limit to 512mb
  restart: unless-stopped
x-deps: &deps
  deploy:
    resources:
      limits:
        memory: 256m # defaulted memory limit to 256mb
  restart: unless-stopped

services:
  postgres:
    <<: *deps
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: playground_app
      POSTGRES_USER: local
      POSTGRES_PASSWORD: local
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/.docker/postgres/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U local"]
      interval: 1s
      timeout: 5s
      retries: 5

  redis:
    <<: *deps
    image: redis:6.2-alpine
    command: redis-server --requirepass local
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]

  rabbitmq:
    <<: *deps
    image: rabbitmq:3.13-management
    container_name: "rabbitmq"
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    # volumes:
    #   - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
    #   - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    # networks:
    #     - rabbitmq_go_net

  mongo:
    <<: *deps
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  grafana:
    <<: *deps
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_LOG_LEVEL: debug
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
    ports:
      - "10000:3000"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/.docker/grafana/provisioning:/etc/grafana/provisioning

  monitoring-prometheus:
    <<: *deps
    image: prom/prometheus
    container_name: monitoring-prometheus
    restart: unless-stopped
    pull_policy: missing
    ports:
      - 10001:9090
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/.docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      [
        "--config.file=/etc/prometheus/prometheus.yml",
        "--storage.tsdb.path=/prometheus",
        "--web.console.libraries=/etc/prometheus/console_libraries",
        "--web.console.templates=/etc/prometheus/consoles",
        "--web.enable-remote-write-receiver",
      ]

  monitoring-otel-collector:
    <<: *deps
    image: otel/opentelemetry-collector-contrib
    container_name: monitoring-otel-collector
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}//.docker/otel-collector.yml:/etc/otelcol-contrib/config.yaml
    ports:
      - 10002:4317 # OTLP gRPC receiver

  monitoring-tempo:
    <<: *deps
    container_name: monitoring-tempo
    image: docker.io/grafana/tempo:main-13885de
    command: ["-config.file=/etc/tempo.yml"]
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/.docker/tempo.yml:/etc/tempo.yml

  # ref: https://github.com/google/cadvisor/issues/3187
  # this is to scrape docker stats' "metrics"
  cadvisor:
    <<: *deps
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    privileged: true # stops oom warning
    platform: linux/aarch64 # m1/m2 mac
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro

  app-go-server:
    <<: *default
    build:
      context: .
      dockerfile: app-go/Dockerfile
    # x-develop:
    #   watch:
    #     - action: rebuild
    #       path: ./app-go
    image: playground-app-go:local
    container_name: app-go-server
    command: /app-go serve
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:80"
      - "8081:81"
    environment:
      HTTP_ADDRESS: 0.0.0.0:80
      PROMETHEUS_HTTP_ADDRESS: 0.0.0.0:81
      DB_CONN: host=postgres user=local password=local dbname=app port=5432 sslmode=disable
      REDIS_URI: redis://:local@redis:6379/0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://monitoring-otel-collector:4317
      OTEL_SERVICE_NAME: app-go-server
      RABBIT_URI: amqp://guest:guest@rabbitmq:5672/
    healthcheck:
      test:
        [
          "CMD",
          "/wget",
          "--quiet",
          "--output-document=-",
          "http://0.0.0.0:80/health",
        ]

  app-go-worker:
    <<: *default
    build:
      context: .
      dockerfile: app-go/Dockerfile
    # x-develop:
    #   watch:
    #     - action: rebuild
    #       path: ./app-go
    image: playground-app-go:local
    container_name: app-go-worker
    command: /app-go work
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:81"
    environment:
      HTTP_ADDRESS: 0.0.0.0:80
      PROMETHEUS_HTTP_ADDRESS: 0.0.0.0:81
      DB_CONN: host=postgres user=local password=local dbname=app port=5432 sslmode=disable
      REDIS_URI: redis://:local@redis:6379/0
      OTEL_EXPORTER_OTLP_ENDPOINT: http://monitoring-otel-collector:4317
      OTEL_SERVICE_NAME: app-go-worker
      RABBIT_URI: amqp://guest:guest@rabbitmq:5672/
    healthcheck:
      test:
        [
          "CMD",
          "/wget",
          "--quiet",
          "--output-document=-",
          "http://0.0.0.0:80/health",
        ]
  app-java-server:
    build:
      context: .
      dockerfile: app-java/Dockerfile
    image: playground-app-java:local
    container_name: app-java-server
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8083:80"
    healthcheck:
      test:
        [
          "CMD",
          "/wget",
          "--quiet",
          "--output-document=-",
          "http://0.0.0.0:80/health",
        ]